from aiogram import Bot, types, asyncio
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
import keyboard
import func
import time
import fileinput
import sqlite3 as sql
import random
from aiogram.utils.markdown import hlink
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils.exceptions import Throttled

captcha = ''
for x in range(4):
  captcha = captcha + random.choice(list('123456789'))

TOKEN='token' #—Ç–æ–∫–µ–Ω –±–æ—Ç–∞
bot = Bot(TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())
adminid = 600257122 #–∞–¥–º–∏–Ω –∏–¥
link = "link" # —é–∑–µ—Ä–Ω–µ–π–º –±–æ—Ç–∞, –ø—Ä–∏–º–µ—Ä ‚Äì freegoldsbot (–ø–∏—Å–∞—Ç—å –±–µ–∑ @ –∏ –±–µ–∑ https://t.me –ø—Ä–æ—Å—Ç–æ —é–∑–µ—Ä–Ω–µ–π–º)
error = "error" # –∫–∞–Ω–∞–ª —Å —Ñ–µ–π–∫ –æ—à–∏–±–∫–∞–º–∏ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞
viplat = "viplat" # –∫–∞–Ω–∞–ª —Å —Ñ–µ–π–∫ –≤—ã–ø–ª–∞—Ç–∞–º–∏
async def anti_flood(*args, **kwargs):
    m = args[0]
    await m.answer("–ù–µ —Ñ–ª—É–¥–∏! –ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã!")
class meinfo(StatesGroup):
    Q1 = State()
    Q2 = State()
    Q3 = State()

@dp.message_handler(Command("promo"), state=None)
async def enter_meinfo(message: types.Message):
    if message.chat.id == adminid:               
        await message.answer("–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤")

        await meinfo.Q3.set()
@dp.message_handler(state=meinfo.Q3)
async def answer_q3(message: types.Message, state: FSMContext):
    answer = message.text
    await state.update_data(answer3=answer)
    await message.answer("–°–æ—Ö—Ä–∞–Ω–∏–ª")
    data = await state.get_data()                #
    answer3 = data.get("answer3")

    joinedFile = open("promo.txt","w", encoding="utf-8")
    joinedFile.write(str(answer3))

    await message.answer(f'–í–∞—à —Ç–µ–∫—Å—Ç: {answer3}')
 
    await state.finish()

@dp.message_handler(Command("cheats"), state=None)
async def enter_meinfo(message: types.Message):
    if message.chat.id == adminid:               
        await message.answer("–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ —Å —á–∏—Ç–∞–º–∏")

        await meinfo.Q1.set()

@dp.message_handler(state=meinfo.Q1)
async def answer_q1(message: types.Message, state: FSMContext):
    answer = message.text
    await state.update_data(answer1=answer)
    await message.answer("–°–æ—Ö—Ä–∞–Ω–∏–ª")
    data = await state.get_data()                #
    answer1 = data.get("answer1")

    joinedFile = open("cheats.txt","w", encoding="utf-8")
    joinedFile.write(str(answer1))

    await message.answer(f'–í–∞—à —Ç–µ–∫—Å—Ç: {answer1}')
 
    await state.finish()
    
@dp.message_handler(commands=["start"])
async def welcome(message):
    if ' ' in message.text and message.chat.id!=message.text[7:]:
        info=func.user(message.chat.id)
        if info is None:
            func.add_ref(message.text[7:])
            await bot.send_message(message.text[7:], f"–£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª, –≥–æ–ª–¥–∞ –Ω–∞—á–∏—Å–ª–∏—Ç—Å—è –Ω–∞ –±–∞–ª–∞–Ω—Å –≤ —Ç–µ—á–µ–Ω–∏–∏ 12 —á–∞—Å–æ–≤.")
    else:
        info=func.user(message.chat.id)
        if info is None:
            con = sql.connect('users.db')
            with con:
                cur = con.cursor()
                cur.execute("CREATE TABLE IF NOT EXISTS `users` (id INT PRIMARY KEY, Nick TEXT, ref INT)")
                cur.execute(f"INSERT OR IGNORE INTO `users` VALUES ('{message.chat.id}', '{message.from_user.first_name}', {0})")
                media = types.MediaGroup() 
                media.attach_photo(types.InputFile('welcome.jpg'), '–ü—Ä–∏–≤–µ—Ç, —Å—É–¥—è –ø–æ –≤—Å–µ–º—É —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–∂, –∏–ª–∏ —Å–∫–∞—á–∞—Ç—å —á–∏—Ç—ã –Ω–∞ Standoff 2. –ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ —Ç—ã –ø–æ–ª—É—á–∏—à—å —Ç–æ —á—Ç–æ —Ö–æ—á–µ—à—å, –ø—Ä–æ–π–¥–∏ –∫–∞–ø—Ç—á—É.') 
                await bot.send_media_group(message.chat.id, media=media)
                await bot.send_message(message.chat.id, f"*{captcha} \n\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —á–∏—Å–ª–æ –≤—ã—à–µ.*", parse_mode='Markdown')
                print ('+1 user')
        elif message.chat.id==60025712:
            await bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, *{message.from_user.first_name},*  –ª—é–±–∏–º—ã–π –∞–¥–º–∏–Ω)", reply_markup=keyboard.startadmin, parse_mode='Markdown')
        else:
                await bot.send_message(message.chat.id, f"*–Ø —Ä–∞–¥ —á—Ç–æ —Ç—ã –≤–µ—Ä–Ω—É–ª—Å—è.*", reply_markup=keyboard.menuMenu, parse_mode='Markdown')

@dp.message_handler(commands=['alert'])
async def alert(message):
    try:
        if message.chat.id==adminid:
            await bot.send_message(message.chat.id, f"*–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å*", parse_mode='Markdown')
            receive_users, block_users = 0, 0
            spisok=func.spisok()
            for user1 in spisok:
                try:
                    await bot.send_message(user1[0], message.text[message.text.find(' '):])
                    receive_users += 1
                except:
                    block_users += 1
                await asyncio.sleep(0.4)
            await bot.send_message(message.chat.id, f"*–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ *\n"
                                                    f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–∏: *{receive_users}*\n"
                                                    f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏: *{block_users}*", parse_mode='Markdown')
    except Exception as e:
        print('–û—à–∏–±–∫–∞ 1', e)

@dp.message_handler(commands=['admin'])
async def apanel(message):
  if message.chat.id==adminid:
    await bot.send_message(message.chat.id, f"*–õ–æ–≤–∏ APANEL*", reply_markup=keyboard.startadmin, parse_mode='Markdown')

@dp.message_handler(content_types=['text'])
async def get_message(message):
    if message.text == "–¢–æ–ø —Ä–µ—Ñ" and message.chat.id==adminid:
        top=func.top()
        await message.answer(text = f"{top}", parse_mode='HTML')
    elif message.text == "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞":
        await message.answer(text = f"–ü—Ä–∏–≥–ª–æ—à–∞–π –ª—é–¥–µ–π –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ –∏ –ø–æ–ª—É—á–∞–π –≥–æ–ª–¥—É –Ω–∞ –±–∞–ª–∞–Ω—Å –≤ –±–æ—Ç–µ.\n\n–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: "+'https://t.me/freagoldso2bot?start='+str(message.chat.id), parse_mode='HTML')
    if message.text == f"{captcha}":
       await message.answer('–¢—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à—ë–ª –∫–∞–ø—Ç—á—É. ü•≥ \n\n–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π –Ω–æ–∂ –≤ Standoff 2, –∏–ª–∏ —Å–∫–∞—á–∞—Ç—å —á–∏—Ç—ã.', parse_mode='Markdown')
       await message.answer('‚è¨ –†–µ–≥–µ—Å—Ç—Ä–∏—Ä—É—é —Ç–µ–±—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ. \n\n10%', parse_mode='Markdown')
       await asyncio.sleep(2)
       await message.answer('‚è¨ –ì–µ–Ω–∏—Ä–∏—Ä—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —á–∏—Ç. \n\n30%', parse_mode='Markdown')
       await asyncio.sleep(2)
       await message.answer('‚è¨ –ü–æ–ª—É—á–∞—é –ø—Ä–æ–º–æ–∫–æ–¥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. \n\n50%', parse_mode='Markdown')
       await asyncio.sleep(2)
       await message.answer('‚è¨ –ó–∞–∫—É–ø–∞—é —Å–∫–∏–Ω—ã –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≥–æ–ª–¥—ã. \n\n90%', parse_mode='Markdown')
       await asyncio.sleep(2)
       await message.answer('‚úÖ –£—Å–ø–µ—à–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞. \n\n100%', reply_markup=keyboard.menuMenu, parse_mode='Markdown')
    if message.text == "–ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã":
        ref=func.ref()
        await message.answer(text = f"{ref}", parse_mode='HTML')
    if message.text == "–ü–æ–ª—É—á–∏—Ç—å —á–∏—Ç—ã":
        link1 = open('cheats.txt', encoding="utf-8")
        cheats = link1.read()

        await bot.send_message(message.chat.id, text = f"*{cheats}*", parse_mode='Markdown', disable_web_page_preview=True)
    if message.text == "–û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å":
        await bot.send_message(message.chat.id, text = f"‚è¨ –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞!\n\n!!!–û–¢–ö–†–´–¢–¨ –ö–ï–ô–° –ú–û–ñ–ù–û –¢–û–õ–¨–ö–û 1 –†–ê–ó, –í –°–õ–ï–î–£–Æ–©–ò–ô –†–ê–ó –ë–£–î–ï–¢ –í–´–ü–ê–î–ê–¢–¨ –¢–û –ñ–ï –°–ê–ú–û–ï –û–†–£–ñ–ò–ï, –ù–û –ò–ù–í–ï–ù–¢–ê–†–¨ –û–°–¢–ê–ù–ï–¢–°–Ø –¢–ê–ö–ò–ú –ñ–ï!!!")
        await asyncio.sleep(2)
        media = types.MediaGroup() 
        media.attach_photo(types.InputFile('case.jpg'), '‚úÖ –¢—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã–ª –∫–µ–π—Å!\n\n–¢–µ–±–µ –≤—ã–ø–∞–ª ‚Äì FAMAS "FURY"') 
        await bot.send_media_group(message.chat.id, media=media)
        await asyncio.sleep(2)
        await bot.send_message(message.chat.id, text = f"‚úÖ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–Ω–∞, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!", reply_markup=keyboard.vivod)
    if message.text == "–ü—Ä–æ–º–æ–∫–æ–¥":
        link1 = open('promo.txt', encoding="utf-8")
        promo = link1.read()

        await bot.send_message(message.chat.id, text = f"*{promo}*", reply_markup=keyboard.done, parse_mode='Markdown', disable_web_page_preview=True)
    if message.text == "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑":
      await bot.send_message(message.chat.id, text = f"*–¢—ã –ø–æ–ø–∞–ª –≤ —Ä–∞–∑–¥–µ–ª –ø–æ  –ø–æ–ª—É—á–µ–Ω–∏—é –ø—Ä–∏–∑–∞, –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø—Ä–∏–∑!*", reply_markup=keyboard.mMenu, parse_mode='Markdown')
    if message.text == "–ù–∞–∑–∞–¥":
      await bot.send_message(message.chat.id, text = f"*–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*", reply_markup=keyboard.menuMenu, parse_mode='Markdown')
    if message.text == "–ü—Ä–æ—Ñ–∏–ª—å":
      ref = func.ref(message)
      await bot.send_message(message.chat.id, text = f"*–ò–º—è: {message.from_user.first_name}\nID: {message.from_user.id}\n\n–ì–æ–ª–¥—ã: {ref}0*", reply_markup=keyboard.vivod, parse_mode='Markdown')
    if message.text == "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å":
      ref = func.ref(message)
      await bot.send_message(message.chat.id, text = f"*FAMAS 'FURY'\n\n–ì–æ–ª–¥—ã: {ref}0*", reply_markup=keyboard.vivod, parse_mode='Markdown')
    if message.text == "‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª":
      await bot.send_message(message.chat.id, text = f"‚ùå –ü–æ—Ö–æ–∂–µ —Ç—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª –æ–¥–Ω–æ –∏–∑ —É—Å–ª–æ–≤–∏–π.\n\n–ï—Å–ª–∏ —Ç—ã –≤—Å–µ –≤—ã–ø–æ–ª–Ω–∏–ª, –ø–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç.")
    if message.text == "–í—ã–ø–ª–∞—Ç—ã":
      await bot.send_message(message.chat.id, text = f"‚úÖ –ö–∞–Ω–∞–ª —Å –≤—ã–ø–ª–∞—Ç–∞–º–∏ –≥–æ–ª–¥—ã –Ω–∞—à–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n{viplat}")
    if message.text == "–ö—Ç–æ –º—ã?":
      await bot.send_message(message.chat.id, text = f"‚úÖ –ú—ã –Ω–∞—á–∏–Ω–∞—é—â–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤.\n\n–ù–∞—à –æ—Ö–≤–∞—Ç –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, –æ–∫–æ–ª–æ 300.000 –≥–æ–ª–¥—ã.\n–í—ã–¥–∞–ª–∏ –±—ã –±–æ–ª–µ–µ 100.000 –≥–æ–ª–¥—ã –∏ –±–æ–ª–µ–µ 100 –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.")
    if message.text == "–í—ã–≤–æ–¥ –≥–æ–ª–¥—ã":
      await bot.send_message(message.chat.id, text = f"‚è¨ –ü–æ–ª—É—á–∞—é –≥–æ–ª–¥—É –Ω–∞ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞, –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. 10%")
      await asyncio.sleep(2)
      await bot.send_message(message.chat.id, text = f"‚è¨ –ü—Ä–æ–≤–µ—Ä—è—é –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. 30%")
      await asyncio.sleep(2)
      await bot.send_message(message.chat.id, text = f"‚ùå ERROR #1204 ‚ùå\n\n –û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ –≥–æ–ª–¥—ã.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ, –∏–ª–∏ –Ω–∞–π–¥–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –≤–∞—à–µ–π –æ—à–∏–±–∫–∏ —Ç—É—Ç ‚Äì {error}", reply_markup=keyboard.nazad)
    if message.text == "–°—Ç–∞—Ç–∞" and message.chat.id==adminid:
      users = func.select_all_users()
      await bot.send_message(message.chat.id, text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

üë§‚Äç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{users}</b>
   """, parse_mode='HTML')
   
@dp.callback_query_handler(text_contains='info')
async def join(call: types.CallbackQuery):
        await bot.edit_message_text(chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text = f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: "+'https://t.me/{link}?start='+str(call.message.chat.id), parse_mode='HTML')
if __name__ == '__main__':
 executor.start_polling(dp)
    